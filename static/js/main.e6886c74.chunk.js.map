{"version":3,"sources":["auth.js","Protected.js","App.js","serviceWorker.js","index.js"],"names":["createAuthContext","clientId","clientSecret","provider","AuthContext","Authenticated","useToken","access_token","basename","window","location","href","match","undefined","App","style","padding","path","to","Protected","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAMsDA,4BAAkB,CACtEC,SALe,2BAMfC,aALmB,mEAMnBC,SALe,oCAEHC,E,EAAAA,YAAaC,E,EAAAA,cAAeC,E,EAAAA,SCJ3B,aAAO,IACZC,EAAiBD,IAAjBC,aAER,OAAO,oCACL,yCACA,+FACA,qCAAWA,KCHTC,EAAWC,OAAOC,SAASC,KAAKC,MAAM,mBAAqB,0BAAuBC,EAyBzEC,MAvBf,WACE,OACE,yBAAKC,MAAO,CAAEC,QAAS,KACrB,kBAACZ,EAAD,KACE,kBAAC,IAAD,CAAQI,SAAUA,GAChB,kBAAC,IAAD,CAAOS,KAAK,KACV,6BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACC,IACD,kBAAC,IAAD,CAAMA,GAAG,cAAT,eAGJ,kBAAC,IAAD,CAAOD,KAAK,cACV,kBAACZ,EAAD,KACE,kBAACc,EAAD,YCTMC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAAST,MACvB,2DCZNU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e6886c74.chunk.js","sourcesContent":["import {createAuthContext} from 'react-pkce'\n\nconst clientId = \"8cb4904ae5581ecc2b3a1774\"\nconst clientSecret = \"b683283462070edbac15a8fdab751ada0f501ab48a5f06aa20aee3be24eac9cc\"\nconst provider = \"https://authenticate.u5auth.com\"\n\nexport const {AuthContext, Authenticated, useToken} = createAuthContext({\n  clientId,\n  clientSecret,\n  provider\n})\n","import React from 'react'\nimport {useToken} from './auth'\nexport default () => {\n  const { access_token } = useToken()\n\n  return <>\n    <h3>Protected</h3>\n    <p>Here, we would load some data via a non-public api, or whatever.</p>\n    <p>Token: {access_token}</p>\n  </>\n}","import React from 'react'\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\nimport {AuthContext, Authenticated} from './auth'\nimport Protected from './Protected'\n\nconst basename = window.location.href.match(/uber5.github.io/) ? '/react-pkce-sample' : undefined\n\nfunction App() {\n  return (\n    <div style={{ padding: 20 }}>\n      <AuthContext>\n        <Router basename={basename}>\n          <Route path='/'>\n            <div>\n              <Link to='/'>Home</Link>\n              {' '}\n              <Link to='/protected'>Protected</Link>\n            </div>\n          </Route>\n          <Route path='/protected'>\n            <Authenticated>\n              <Protected />\n            </Authenticated>\n          </Route>\n        </Router>\n      </AuthContext>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}